#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('csfx-serv-core:server');
var http = require('http');
var https = require('https');
var fs    = require('fs');
const crypto = require('crypto') 
var log4js = require('log4js');
// log4js.configure('../configs/log4js.json');
// var log4jsConfig = require('../configs/log4js');
// var cluster = require('express-cluster');

var log = log4js.getLogger("startup"); 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port); 
 /*Note -> Uncomment this code only when upload on server both var httpOptions and var server
  and comment   var server = http.createServer(app); and  server.listen(port);*/
 

//In case .pem extention don't work change extentions and  use this  and comment  below one var httpOptions only
// var httpOptions =  {
//   key: fs.readFileSync("./keys/privatekey.key"),
//   cert: fs.readFileSync("./keys/certificate.crt")
// };


//For production use this
// var httpOptions =  {
//   key: fs.readFileSync("./keys/privatekey.pem"),
//   cert: fs.readFileSync("./keys/certificate.pem")
// }; 
// var server = https.createServer(httpOptions, app)
//   .listen(port, 'services.dhol.app', function () {
//     console.log('Example app listening on port 3001! Go to https://208.109.15.102/')
// });
 

// For Locally use this

  var server = http.createServer(app);
  server.listen(port);
  /**
 * Create HTTP server.
 */
/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);


server.on('listening', onListening);
process.on('uncaughtException', function (err) {
  console.error(err);
  console.log("Node NOT Exiting...");
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
